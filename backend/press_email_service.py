"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–æ–≤ –ø–æ email —á–µ—Ä–µ–∑ SMTP
"""
import os
import logging
import aiosmtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import Optional, List
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)


class PressReleaseEmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–æ–≤ –ø–æ email"""

    def __init__(self):
        # SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è info@pressreach.ru
        self.smtp_server = os.getenv("SMTP_SERVER", "mail.hosting.reg.ru")
        self.smtp_port = int(os.getenv("SMTP_PORT", "465"))
        self.smtp_username = os.getenv("SMTP_USERNAME", "info@pressreach.ru")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "danmyj-winHoq-6nagby")
        self.from_email = os.getenv("FROM_EMAIL", "info@pressreach.ru")
        self.from_name = os.getenv("FROM_NAME", "PressReach")

    async def send_press_release(
            self,
            to_email: str,
            subject: str,
            html_content: str,
            text_content: str,
            attachments: Optional[List[str]] = None,
            company_name: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ SMTP —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏

        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–°–ú–ò)
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞)
            html_content: HTML –≤–µ—Ä—Å–∏—è –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞
            text_content: –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞
            attachments: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è From)

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MIMEMultipart("alternative")
            message["Subject"] = subject

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if company_name:
                message["From"] = f"{company_name} <{self.from_email}>"
            else:
                message["From"] = f"{self.from_name} <{self.from_email}>"

            message["To"] = to_email
            message["Reply-To"] = self.from_email

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            text_part = MIMEText(text_content, "plain", "utf-8")
            message.attach(text_part)

            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
            html_part = MIMEText(html_content, "html", "utf-8")
            message.attach(html_part)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª—ã –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞)
            if attachments:
                for file_path in attachments:
                    file_path_obj = Path(file_path)
                    if file_path_obj.is_file():
                        try:
                            with open(file_path, "rb") as attachment_file:
                                part = MIMEBase("application", "octet-stream")
                                part.set_payload(attachment_file.read())

                            encoders.encode_base64(part)
                            part.add_header(
                                "Content-Disposition",
                                f"attachment; filename={file_path_obj.name}",
                            )
                            message.attach(part)
                            logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {file_path_obj.name}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            # –î–ª—è –ø–æ—Ä—Ç–∞ 465 –∏—Å–ø–æ–ª—å–∑—É–µ–º use_tls=True (SSL)
            # –î–ª—è –ø–æ—Ä—Ç–æ–≤ 587/25 –∏—Å–ø–æ–ª—å–∑—É–µ–º start_tls=True (STARTTLS)
            use_tls = self.smtp_port == 465
            start_tls = self.smtp_port in [587, 25]

            await aiosmtplib.send(
                message,
                hostname=self.smtp_server,
                port=self.smtp_port,
                use_tls=use_tls,
                start_tls=start_tls,
                username=self.smtp_username,
                password=self.smtp_password,
                timeout=60,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            )

            logger.info(f"‚úÖ –ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
            return True

        except aiosmtplib.SMTPException as e:
            logger.error(f"‚ùå SMTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {to_email}: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–∞ –Ω–∞ {to_email}: {str(e)}")
            return False

    async def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP: {self.smtp_server}:{self.smtp_port}")
            logger.info(f"   Username: {self.smtp_username}")

            use_tls = self.smtp_port == 465
            start_tls = self.smtp_port in [587, 25]

            async with aiosmtplib.SMTP(
                hostname=self.smtp_server,
                port=self.smtp_port,
                use_tls=use_tls,
                timeout=30
            ) as smtp:
                if start_tls:
                    await smtp.starttls()
                await smtp.login(self.smtp_username, self.smtp_password)
                logger.info("‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP: {str(e)}")
            logger.error(f"   –°–µ—Ä–≤–µ—Ä: {self.smtp_server}:{self.smtp_port}")
            logger.error(f"   Username: {self.smtp_username}")
            return False
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
press_email_service = PressReleaseEmailService()
